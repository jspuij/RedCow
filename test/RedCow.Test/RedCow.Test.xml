<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedCow.Test</name>
    </assembly>
    <members>
        <member name="T:RedCow.Test.Car">
            <summary>
            Car class.
            </summary>
        </member>
        <member name="F:RedCow.Test.Car._Make">
            <summary>
            Make field.
            </summary>
        </member>
        <member name="P:RedCow.Test.Car.Make">
            <summary>
             Gets or sets Make.
            </summary>
        </member>
        <member name="F:RedCow.Test.Car._Model">
            <summary>
            Model field.
            </summary>
        </member>
        <member name="P:RedCow.Test.Car.Model">
            <summary>
             Gets or sets Model.
            </summary>
        </member>
        <member name="F:RedCow.Test.Car._Crashed">
            <summary>
             A boolean indicating whether Crashed is true.
            </summary>
        </member>
        <member name="P:RedCow.Test.Car.Crashed">
            <summary>
             Gets or sets a value indicating whether Crashed is true.
            </summary>
        </member>
        <member name="F:RedCow.Test.Car.publicPropertyGetters">
            <summary>
            Dictionary with public property getters.
            </summary>
        </member>
        <member name="P:RedCow.Test.Car.RedCow#IPropertyAccessors#PublicPropertyGetters">
            <summary>
            Gets the Public Property Getters.
            </summary>
        </member>
        <member name="F:RedCow.Test.Car.publicPropertySetters">
            <summary>
            Dictionary with public property setters.
            </summary>
        </member>
        <member name="P:RedCow.Test.Car.RedCow#IPropertyAccessors#PublicPropertySetters">
            <summary>
            Gets the Public Property Setters.
            </summary>
        </member>
        <member name="F:RedCow.Test.Car.locked">
            <summary>
            Whether the instance is locked.
            </summary>
        </member>
        <member name="P:RedCow.Test.Car.RedCow#ILockable#Locked">
            <summary>
            Gets a value indicating whether the immutable is locked.
            </summary>
        </member>
        <member name="M:RedCow.Test.Car.RedCow#ILockable#Lock">
            <summary>
            Locks the immutable.
            </summary>
        </member>
        <member name="T:RedCow.Test.Collections.ProxyDictionaryTests`2">
            <summary>
            Unit tests for the <see cref="T:RedCow.Test.Collections.ProxyDictionaryTests`2"/> class.
            </summary>
            <typeparam name="TKey">The type for keys inside the proxydictionary.</typeparam>
            <typeparam name="TValue">The type for values inside the proxydictionary.</typeparam>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.#ctor(System.Func{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Test.Collections.ProxyDictionaryTests`2"/> class.
            </summary>
            <param name="keyValuePairCreator">The function to create a new T.</param>
        </member>
        <member name="P:RedCow.Test.Collections.ProxyDictionaryTests`2.ProxyDictionary">
            <summary>
            Gets proxy dictionary.
            </summary>
        </member>
        <member name="P:RedCow.Test.Collections.ProxyDictionaryTests`2.DraftScope">
            <summary>
            Gets draft scope.
            </summary>
        </member>
        <member name="P:RedCow.Test.Collections.ProxyDictionaryTests`2.KeyValuePairCreator">
            <summary>
            Gets creator function.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.AddTest">
            <summary>
            Tests the Add method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.UpdateTest">
            <summary>
            Tests the Update method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.DecomposedAddTest">
            <summary>
            Tests the Decomposed Add method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.ClearTest">
            <summary>
            Tests the Clear method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.ContainsTest">
            <summary>
            Tests the Clear method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.ContainsKeyTest">
            <summary>
            Tests the Clear method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.CopyToTest">
            <summary>
            Tests the CopyTo method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.GenericEnumeratorTest">
            <summary>
            Tests the generic enumerator.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.NonGenericEnumeratorTest">
            <summary>
            Tests the non-generic enumerator.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.IsPropertiesTest">
            <summary>
            Tests the Is... properties on the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/>.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.OriginalTest">
            <summary>
            Tests for the original.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.RemoveTest">
            <summary>
            Tests the Remove method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.RemoveWithKeyTest">
            <summary>
            Tests the Remove method with key.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.ReadOnlyTest">
            <summary>
            Tests all operations for readonly.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.RevokedTest">
            <summary>
            Tests all operations for revoked.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTests`2.FinishDraft">
            <summary>
            Finishes the draft for this dictionary.
            </summary>
            <returns>A readonly dictionary.</returns>
        </member>
        <member name="T:RedCow.Test.Collections.ProxyDictionaryTestPersonTests">
            <summary>
            Unit tests for the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/> class with TestPerson draftable content.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryTestPersonTests.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Test.Collections.ProxyDictionaryTestPersonTests"/> class.
            </summary>
        </member>
        <member name="T:RedCow.Test.Collections.ProxyDictionaryStringTests">
            <summary>
            Unit tests for the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/> class with TestPerson draftable content.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryStringTests.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Test.Collections.ProxyDictionaryStringTests"/> class.
            </summary>
        </member>
        <member name="T:RedCow.Test.Collections.ProxyDictionaryIntegerTests">
            <summary>
            Unit tests for the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/> class with TestPerson draftable content.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyDictionaryIntegerTests.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Test.Collections.ProxyDictionaryIntegerTests"/> class.
            </summary>
        </member>
        <member name="T:RedCow.Test.Collections.ProxyListTests`1">
            <summary>
            Unit tests for the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/> class.
            </summary>
            <typeparam name="T">The type inside the proxylist.</typeparam>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Test.Collections.ProxyListTests`1"/> class.
            </summary>
            <param name="tCreator">The function to create a new T.</param>
        </member>
        <member name="P:RedCow.Test.Collections.ProxyListTests`1.ProxyList">
            <summary>
            Gets proxy list.
            </summary>
        </member>
        <member name="P:RedCow.Test.Collections.ProxyListTests`1.DraftScope">
            <summary>
            Gets draft scope.
            </summary>
        </member>
        <member name="P:RedCow.Test.Collections.ProxyListTests`1.TCreator">
            <summary>
            Gets creator function.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.AddTest">
            <summary>
            Tests the Add method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.UpdateTest">
            <summary>
            Tests the Update method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.ClearTest">
            <summary>
            Tests the Clear method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.ContainsTest">
            <summary>
            Tests the Clear method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.CopyToTest">
            <summary>
            Tests the CopyTo method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.GenericEnumeratorTest">
            <summary>
            Tests the generic enumerator.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.NonGenericEnumeratorTest">
            <summary>
            Tests the non-generic enumerator.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.IndexOfTest">
            <summary>
            Tests the IndexOf method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.InsertTest">
            <summary>
            Tests the Insert method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.IsPropertiesTest">
            <summary>
            Tests the Is... properties on the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/>.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.OriginalTest">
            <summary>
            Tests for the original.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.RemoveTest">
            <summary>
            Tests the Remove method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.RemoveAtTest">
            <summary>
            Tests the RemoveAt method.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.ReadOnlyTest">
            <summary>
            Tests all operations for readonly.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.RevokedTest">
            <summary>
            Tests all operations for revoked.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTests`1.FinishDraft">
            <summary>
            Finishes the draft for this list.
            </summary>
            <returns>A readonly list.</returns>
        </member>
        <member name="T:RedCow.Test.Collections.ProxyListTestPersonTests">
            <summary>
            Unit tests for the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/> class with TestPerson draftable content.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListTestPersonTests.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Test.Collections.ProxyListTestPersonTests"/> class.
            </summary>
        </member>
        <member name="T:RedCow.Test.Collections.ProxyListStringTests">
            <summary>
            Unit tests for the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/> class with TestPerson draftable content.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListStringTests.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Test.Collections.ProxyListStringTests"/> class.
            </summary>
        </member>
        <member name="T:RedCow.Test.Collections.ProxyListIntegerTests">
            <summary>
            Unit tests for the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/> class with TestPerson draftable content.
            </summary>
        </member>
        <member name="M:RedCow.Test.Collections.ProxyListIntegerTests.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Test.Collections.ProxyListIntegerTests"/> class.
            </summary>
        </member>
        <member name="T:RedCow.Test.CollectionTests">
            <summary>
            Unit tests for collections.
            </summary>
        </member>
        <member name="M:RedCow.Test.CollectionTests.CollectionProduceTest">
            <summary>
            Tests producing a collection.
            </summary>
        </member>
        <member name="M:RedCow.Test.CollectionTests.CollectionNestedChangeTest">
            <summary>
            Tests producing a collection.
            </summary>
        </member>
        <member name="M:RedCow.Test.CollectionTests.UnchangedCollectionTest">
            <summary>
            Tests whether enumerating the collection, but not changing anything,
            returns the original collection.
            </summary>
        </member>
        <member name="M:RedCow.Test.CollectionTests.CollectionRevokedTest">
            <summary>
            Tests whether the collection is revoked.
            </summary>
        </member>
        <member name="M:RedCow.Test.CollectionTests.DictionaryProduceTest">
            <summary>
            Tests producing a collection.
            </summary>
        </member>
        <member name="M:RedCow.Test.CollectionTests.DictionaryNestedChangeTest">
            <summary>
            Tests producing a dictionary with a nested change.
            </summary>
        </member>
        <member name="M:RedCow.Test.CollectionTests.DictionaryRevokedTest">
            <summary>
            Tests whether the dictionary is revoked.
            </summary>
        </member>
        <member name="M:RedCow.Test.CollectionTests.UnchangedDictionaryTest">
            <summary>
            Tests whether enumerating the dictionary, but not changing anything,
            returns the original dictionary.
            </summary>
        </member>
        <member name="T:RedCow.Test.ICar">
            <summary>
            Car interface.
            </summary>
        </member>
        <member name="P:RedCow.Test.ICar.Make">
            <summary>
            Gets make of the Car.
            </summary>
        </member>
        <member name="P:RedCow.Test.ICar.Model">
            <summary>
            Gets model of the car.
            </summary>
        </member>
        <member name="P:RedCow.Test.ICar.Crashed">
            <summary>
            Gets a value indicating whether the car has crashed.
            </summary>
        </member>
        <member name="M:RedCow.Test.ICar.Produce(RedCow.Test.Car,RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.ICar"/> based on the
            intial state.
            </summary>
            <param name = "initialState">The initial State.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ICar.Produce(System.Action{RedCow.Test.Car},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.ICar"/> based on the
            specified recipe action.
            </summary>
            <param name = "recipe">The recipe action.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ICar.Produce(RedCow.Test.Car,System.Action{RedCow.Test.Car},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.ICar"/> based on the
            specified recipe action.
            </summary>
            <param name = "initialState">The initial State.</param>
            <param name = "recipe">The recipe action.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ICar.Produce(System.Func{RedCow.Test.Car},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.ICar"/> based on the
            specified recipe function.
            </summary>
            <param name = "recipe">The recipe function.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ICar.Produce(RedCow.Test.Car,System.Func{RedCow.Test.Car},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.ICar"/> based on the
            specified recipe function.
            </summary>
            <param name = "initialState">The initial State.</param>
            <param name = "recipe">The recipe function.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ICar.Producer(System.Action{RedCow.Test.Car},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe action that operates on an object of type T.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>A producer delegate.</returns>
        </member>
        <member name="M:RedCow.Test.ICar.Producer(System.Func{RedCow.Test.Car},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe function that returns an object of type T.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>A recipe delegate.</returns>
        </member>
        <member name="M:RedCow.Test.ICar.Producer``1(System.Action{RedCow.Test.Car,``0},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe action that operates on an object of type T with a single argument.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <typeparam name = "TArg">The type of the argument.</typeparam>
            <returns>A producer delegate.</returns>
        </member>
        <member name="M:RedCow.Test.ICar.Producer``1(System.Func{``0,RedCow.Test.Car},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe function that returns an object of type T with a single argument.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <typeparam name = "TArg">The type of the argument.</typeparam>
            <returns>A producer delegate.</returns>
        </member>
        <member name="T:RedCow.Test.ImmutableProducerTests">
            <summary>
            Unit tests for Immutable Producers.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.InitialProduceTest">
            <summary>
            Tests the Initial Produce Method.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.StaticProduceActionTest">
            <summary>
            Tests the Produce Method.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.ProduceActionTest">
            <summary>
            Tests the Produce Method.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.StaticProduceFunctionTest">
            <summary>
            Tests the Produce Method.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.ProduceFunctionTest">
            <summary>
            Tests the Produce Method.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.ProducerActionTest">
            <summary>
            Tests the Producer Method.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.ProducerFunctionTest">
            <summary>
            Tests the Produce Method.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.ProducerActionWithArgumentTest">
            <summary>
            Tests the Producer Method with argument.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.LockedTest">
            <summary>
            Tests the that the produced immutable cannot be altered.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.DraftRevokedTest">
            <summary>
            Tests that a draft is revoked after the immutable is produced.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.DontDraftNewState">
            <summary>
            Tests that during produce new state is not drafted.
            </summary>
        </member>
        <member name="T:RedCow.Test.IPhoneBook">
            <summary>
            A phone book.
            </summary>
        </member>
        <member name="P:RedCow.Test.IPhoneBook.Entries">
            <summary>
            Gets the phone book entries.
            </summary>
        </member>
        <member name="M:RedCow.Test.IPhoneBook.Produce(RedCow.Test.PhoneBook,RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.IPhoneBook"/> based on the
            intial state.
            </summary>
            <param name = "initialState">The initial State.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.IPhoneBook.Produce(System.Action{RedCow.Test.PhoneBook},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.IPhoneBook"/> based on the
            specified recipe action.
            </summary>
            <param name = "recipe">The recipe action.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.IPhoneBook.Produce(RedCow.Test.PhoneBook,System.Action{RedCow.Test.PhoneBook},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.IPhoneBook"/> based on the
            specified recipe action.
            </summary>
            <param name = "initialState">The initial State.</param>
            <param name = "recipe">The recipe action.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.IPhoneBook.Produce(System.Func{RedCow.Test.PhoneBook},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.IPhoneBook"/> based on the
            specified recipe function.
            </summary>
            <param name = "recipe">The recipe function.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.IPhoneBook.Produce(RedCow.Test.PhoneBook,System.Func{RedCow.Test.PhoneBook},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.IPhoneBook"/> based on the
            specified recipe function.
            </summary>
            <param name = "initialState">The initial State.</param>
            <param name = "recipe">The recipe function.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.IPhoneBook.Producer(System.Action{RedCow.Test.PhoneBook},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe action that operates on an object of type T.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>A producer delegate.</returns>
        </member>
        <member name="M:RedCow.Test.IPhoneBook.Producer(System.Func{RedCow.Test.PhoneBook},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe function that returns an object of type T.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>A recipe delegate.</returns>
        </member>
        <member name="M:RedCow.Test.IPhoneBook.Producer``1(System.Action{RedCow.Test.PhoneBook,``0},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe action that operates on an object of type T with a single argument.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <typeparam name = "TArg">The type of the argument.</typeparam>
            <returns>A producer delegate.</returns>
        </member>
        <member name="M:RedCow.Test.IPhoneBook.Producer``1(System.Func{``0,RedCow.Test.PhoneBook},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe function that returns an object of type T with a single argument.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <typeparam name = "TArg">The type of the argument.</typeparam>
            <returns>A producer delegate.</returns>
        </member>
        <member name="T:RedCow.Test.ITestPerson">
            <summary>
            Interface for an Immutable Test Person.
            </summary>
        </member>
        <member name="P:RedCow.Test.ITestPerson.FirstName">
            <summary>
            Gets the first name.
            </summary>
        </member>
        <member name="P:RedCow.Test.ITestPerson.LastName">
            <summary>
            Gets the last name.
            </summary>
        </member>
        <member name="P:RedCow.Test.ITestPerson.IsAdult">
            <summary>
            Gets a value indicating whether isAdult is true.
            </summary>
        </member>
        <member name="P:RedCow.Test.ITestPerson.FirstChild">
            <summary>
            Gets the First Child.
            </summary>
        </member>
        <member name="P:RedCow.Test.ITestPerson.SecondChild">
            <summary>
            Gets the Second Schild.
            </summary>
        </member>
        <member name="P:RedCow.Test.ITestPerson.Cars">
            <summary>
            Gets the cars.
            </summary>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Produce(RedCow.Test.TestPerson,RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.ITestPerson"/> based on the
            intial state.
            </summary>
            <param name = "initialState">The initial State.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Produce(System.Action{RedCow.Test.TestPerson},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.ITestPerson"/> based on the
            specified recipe action.
            </summary>
            <param name = "recipe">The recipe action.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Produce(RedCow.Test.TestPerson,System.Action{RedCow.Test.TestPerson},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.ITestPerson"/> based on the
            specified recipe action.
            </summary>
            <param name = "initialState">The initial State.</param>
            <param name = "recipe">The recipe action.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Produce(System.Func{RedCow.Test.TestPerson},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.ITestPerson"/> based on the
            specified recipe function.
            </summary>
            <param name = "recipe">The recipe function.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Produce(RedCow.Test.TestPerson,System.Func{RedCow.Test.TestPerson},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.ITestPerson"/> based on the
            specified recipe function.
            </summary>
            <param name = "initialState">The initial State.</param>
            <param name = "recipe">The recipe function.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Producer(System.Action{RedCow.Test.TestPerson},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe action that operates on an object of type T.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>A producer delegate.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Producer(System.Func{RedCow.Test.TestPerson},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe function that returns an object of type T.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>A recipe delegate.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Producer``1(System.Action{RedCow.Test.TestPerson,``0},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe action that operates on an object of type T with a single argument.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <typeparam name = "TArg">The type of the argument.</typeparam>
            <returns>A producer delegate.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Producer``1(System.Func{``0,RedCow.Test.TestPerson},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe function that returns an object of type T with a single argument.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <typeparam name = "TArg">The type of the argument.</typeparam>
            <returns>A producer delegate.</returns>
        </member>
        <member name="T:RedCow.Test.NestedTests">
            <summary>
            Unit tests for nested produce and immutability.
            </summary>
        </member>
        <member name="M:RedCow.Test.NestedTests.NestedChangeTest">
            <summary>
            Tests a nested change.
            </summary>
        </member>
        <member name="M:RedCow.Test.NestedTests.InnerNestedChangeTest">
            <summary>
            Tests a nested change where an inner draft is changed.
            This should also change all parent drafts up to the root.
            </summary>
        </member>
        <member name="M:RedCow.Test.NestedTests.CircularReferenceTest">
            <summary>
            Tests for CoW of circular references.
            </summary>
        </member>
        <member name="M:RedCow.Test.NestedTests.CircularReferenceWithPointerUpdateTest">
            <summary>
            Tests for CoW of circular references with a pointer update to close the loop.
            </summary>
        </member>
        <member name="M:RedCow.Test.NestedTests.NestedCircularReferenceTest">
            <summary>
            Tests for CoW of nested circular references.
            </summary>
        </member>
        <member name="M:RedCow.Test.NestedTests.NestedCircularReferenceWithPointerUpdateTest">
            <summary>
            Tests for CoW of nested circular references with a pointer update to close the loop.
            </summary>
        </member>
        <member name="M:RedCow.Test.NestedTests.NestedLockedTest">
            <summary>
            Tests the that the produced immutable cannot be altered.
            </summary>
        </member>
        <member name="M:RedCow.Test.NestedTests.NestedDraftRevokedTest">
            <summary>
            Tests that a draft is revoked after the immutable is produced.
            </summary>
        </member>
        <member name="M:RedCow.Test.NestedTests.NestedProduceTest">
            <summary>
            Test using nested producers.
            </summary>
        </member>
        <member name="M:RedCow.Test.NestedTests.NestedProduceCanContinueTest">
            <summary>
            Test using nested producers.
            </summary>
        </member>
        <member name="M:RedCow.Test.NestedTests.NestedProduceRollbackTest">
            <summary>
            Test using nested producers with a rollback in the middle.
            </summary>
        </member>
        <member name="T:RedCow.Test.Patches.ObjectPatchGeneratorTests">
            <summary>
            Unit tests for the <see cref="T:RedCow.Immutable.Patches.ObjectPatchGenerator"/> class.
            </summary>
        </member>
        <member name="M:RedCow.Test.Patches.ObjectPatchGeneratorTests.GenerateObjectPatch">
            <summary>
            Tests the generation of an object patch.
            </summary>
        </member>
        <member name="M:RedCow.Test.Patches.ObjectPatchGeneratorTests.GenerateAndApplyPatch">
            <summary>
            Tests the generation and application of an object patch.
            </summary>
        </member>
        <member name="M:RedCow.Test.Patches.ObjectPatchGeneratorTests.GenerateAndApplyReversePatch">
            <summary>
            Tests the generation and application of an object patch.
            </summary>
        </member>
        <member name="M:RedCow.Test.Patches.ObjectPatchGeneratorTests.AssertJsonEqual(System.String,System.String)">
            <summary>
            Asserts that two JSon strings are equal.
            </summary>
            <param name="expected">The expected JSON.</param>
            <param name="actual">The actual JSon.</param>
        </member>
        <member name="T:RedCow.Test.PhoneBook">
            <summary>
            A phone book.
            </summary>
        </member>
        <member name="F:RedCow.Test.PhoneBook._Entries">
            <summary>
            Entries field.
            </summary>
        </member>
        <member name="P:RedCow.Test.PhoneBook.Entries">
            <summary>
             Gets or sets Entries.
            </summary>
        </member>
        <member name="P:RedCow.Test.PhoneBook.RedCow#Test#IPhoneBook#Entries">
            <summary>
            Gets Entries.
            </summary>
        </member>
        <member name="F:RedCow.Test.PhoneBook.publicPropertyGetters">
            <summary>
            Dictionary with public property getters.
            </summary>
        </member>
        <member name="P:RedCow.Test.PhoneBook.RedCow#IPropertyAccessors#PublicPropertyGetters">
            <summary>
            Gets the Public Property Getters.
            </summary>
        </member>
        <member name="F:RedCow.Test.PhoneBook.publicPropertySetters">
            <summary>
            Dictionary with public property setters.
            </summary>
        </member>
        <member name="P:RedCow.Test.PhoneBook.RedCow#IPropertyAccessors#PublicPropertySetters">
            <summary>
            Gets the Public Property Setters.
            </summary>
        </member>
        <member name="F:RedCow.Test.PhoneBook.locked">
            <summary>
            Whether the instance is locked.
            </summary>
        </member>
        <member name="P:RedCow.Test.PhoneBook.RedCow#ILockable#Locked">
            <summary>
            Gets a value indicating whether the immutable is locked.
            </summary>
        </member>
        <member name="M:RedCow.Test.PhoneBook.RedCow#ILockable#Lock">
            <summary>
            Locks the immutable.
            </summary>
        </member>
        <member name="T:RedCow.Test.TestPerson">
            <summary>
            The mutable type.
            </summary>
        </member>
        <member name="F:RedCow.Test.TestPerson._FirstName">
            <summary>
            FirstName field.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.FirstName">
            <summary>
             Gets or sets FirstName.
            </summary>
        </member>
        <member name="F:RedCow.Test.TestPerson._LastName">
            <summary>
            LastName field.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.LastName">
            <summary>
             Gets or sets LastName.
            </summary>
        </member>
        <member name="F:RedCow.Test.TestPerson._IsAdult">
            <summary>
             A boolean indicating whether IsAdult is true.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.IsAdult">
            <summary>
             Gets or sets a value indicating whether IsAdult is true.
            </summary>
        </member>
        <member name="F:RedCow.Test.TestPerson._FirstChild">
            <summary>
            FirstChild field.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.FirstChild">
            <summary>
             Gets or sets FirstChild.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.RedCow#Test#ITestPerson#FirstChild">
            <summary>
            Gets FirstChild.
            </summary>
        </member>
        <member name="F:RedCow.Test.TestPerson._SecondChild">
            <summary>
            SecondChild field.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.SecondChild">
            <summary>
             Gets or sets SecondChild.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.RedCow#Test#ITestPerson#SecondChild">
            <summary>
            Gets SecondChild.
            </summary>
        </member>
        <member name="F:RedCow.Test.TestPerson._Cars">
            <summary>
            Cars field.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.Cars">
            <summary>
             Gets or sets Cars.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.RedCow#Test#ITestPerson#Cars">
            <summary>
            Gets Cars.
            </summary>
        </member>
        <member name="F:RedCow.Test.TestPerson.publicPropertyGetters">
            <summary>
            Dictionary with public property getters.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.RedCow#IPropertyAccessors#PublicPropertyGetters">
            <summary>
            Gets the Public Property Getters.
            </summary>
        </member>
        <member name="F:RedCow.Test.TestPerson.publicPropertySetters">
            <summary>
            Dictionary with public property setters.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.RedCow#IPropertyAccessors#PublicPropertySetters">
            <summary>
            Gets the Public Property Setters.
            </summary>
        </member>
        <member name="F:RedCow.Test.TestPerson.locked">
            <summary>
            Whether the instance is locked.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.RedCow#ILockable#Locked">
            <summary>
            Gets a value indicating whether the immutable is locked.
            </summary>
        </member>
        <member name="M:RedCow.Test.TestPerson.RedCow#ILockable#Lock">
            <summary>
            Locks the immutable.
            </summary>
        </member>
        <member name="T:RedCow.Test.ProxyCar">
            <summary>
            Proxy Implementation of <see cref = "T:RedCow.Test.Car"/>.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyCar.Make">
            <summary>
             Gets or sets Make.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyCar.Model">
            <summary>
             Gets or sets Model.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyCar.Crashed">
            <summary>
             Gets or sets a value indicating whether Crashed is true.
            </summary>
        </member>
        <member name="F:RedCow.Test.ProxyCar.draftState">
            <summary>
            the draftState field.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyCar.RedCow#Immutable#IDraft#DraftState">
            <summary>
            Gets or sets the DraftState.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyCar.Original">
            <summary>
            Gets the original.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyCar.ImmutableOriginal">
            <summary>
            Gets the original as Immutable.
            </summary>
        </member>
        <member name="M:RedCow.Test.ProxyCar.RedCow#Immutable#IDraft#Clone">
            <summary>
            Clones the object from the original.
            </summary>
        </member>
        <member name="T:RedCow.Test.ProxyPhoneBook">
            <summary>
            Proxy Implementation of <see cref = "T:RedCow.Test.PhoneBook"/>.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyPhoneBook.Entries">
            <summary>
             Gets or sets Entries.
            </summary>
        </member>
        <member name="F:RedCow.Test.ProxyPhoneBook.draftState">
            <summary>
            the draftState field.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyPhoneBook.RedCow#Immutable#IDraft#DraftState">
            <summary>
            Gets or sets the DraftState.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyPhoneBook.Original">
            <summary>
            Gets the original.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyPhoneBook.ImmutableOriginal">
            <summary>
            Gets the original as Immutable.
            </summary>
        </member>
        <member name="M:RedCow.Test.ProxyPhoneBook.RedCow#Immutable#IDraft#Clone">
            <summary>
            Clones the object from the original.
            </summary>
        </member>
        <member name="T:RedCow.Test.ProxyTestPerson">
            <summary>
            Proxy Implementation of <see cref = "T:RedCow.Test.TestPerson"/>.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyTestPerson.FirstName">
            <summary>
             Gets or sets FirstName.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyTestPerson.LastName">
            <summary>
             Gets or sets LastName.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyTestPerson.IsAdult">
            <summary>
             Gets or sets a value indicating whether IsAdult is true.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyTestPerson.FirstChild">
            <summary>
             Gets or sets FirstChild.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyTestPerson.SecondChild">
            <summary>
             Gets or sets SecondChild.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyTestPerson.Cars">
            <summary>
             Gets or sets Cars.
            </summary>
        </member>
        <member name="F:RedCow.Test.ProxyTestPerson.draftState">
            <summary>
            the draftState field.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyTestPerson.RedCow#Immutable#IDraft#DraftState">
            <summary>
            Gets or sets the DraftState.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyTestPerson.Original">
            <summary>
            Gets the original.
            </summary>
        </member>
        <member name="P:RedCow.Test.ProxyTestPerson.ImmutableOriginal">
            <summary>
            Gets the original as Immutable.
            </summary>
        </member>
        <member name="M:RedCow.Test.ProxyTestPerson.RedCow#Immutable#IDraft#Clone">
            <summary>
            Clones the object from the original.
            </summary>
        </member>
    </members>
</doc>
