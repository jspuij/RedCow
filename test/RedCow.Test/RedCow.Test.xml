<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedCow.Test</name>
    </assembly>
    <members>
        <member name="T:RedCow.Test.ImmutableOfTTests">
            <summary>
            Unit tests for <see cref="T:RedCow.Immutable`1"/>.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableOfTTests.ProduceTest">
            <summary>
            Tests the Produce Method.
            </summary>
        </member>
        <member name="T:RedCow.Test.ITestPerson">
            <summary>
            Interface for an Immutable Test Person.
            </summary>
        </member>
        <member name="P:RedCow.Test.ITestPerson.FirstName">
            <summary>
            Gets the first name.
            </summary>
        </member>
        <member name="P:RedCow.Test.ITestPerson.LastName">
            <summary>
            Gets the last name.
            </summary>
        </member>
        <member name="P:RedCow.Test.ITestPerson.IsAdult">
            <summary>
            Gets a value indicating whether isAdult is true.
            </summary>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Produce(System.Action{RedCow.Test.TestPerson},RedCow.ICloneProvider)">
            <summary>
            Produces the next <see cref="T:RedCow.Immutable`1"/> based on the
            specified producer function.
            </summary>
            <param name="producer">The producer action.</param>
            <param name="cloneProvider">The clone provider to use.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Produce(RedCow.Test.TestPerson,System.Action{RedCow.Test.TestPerson},RedCow.ICloneProvider)">
            <summary>
            Produces the next <see cref="T:RedCow.Immutable`1"/> based on the
            specified producer function.
            </summary>
            <param name="initialState">The initial State.</param>
            <param name="producer">The producer action.</param>
            <param name="cloneProvider">The clone provider to use.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Produce(System.Func{RedCow.Test.TestPerson},RedCow.ICloneProvider)">
            <summary>
            Produces the next <see cref="T:RedCow.Immutable`1"/> based on the
            specified producer function.
            </summary>
            <param name="producer">The producer function.</param>
            <param name="cloneProvider">The clone provider to use.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Produce(RedCow.Test.TestPerson,System.Func{RedCow.Test.TestPerson},RedCow.ICloneProvider)">
            <summary>
            Produces the next <see cref = "T:RedCow.Immutable`1"/> based on the
            specified producer function.
            </summary>
            <param name = "initialState">The initial State.</param>
            <param name = "producer">The producer function.</param>
            <param name = "cloneProvider">The clone provider to use.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Producer(System.Action{RedCow.Test.TestPerson},RedCow.ICloneProvider)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "producer">The producer action that operates on an object of type T.</param>
            <param name = "cloneProvider">The clone provider to use.</param>
            <returns>A producer delegate.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Producer(System.Func{RedCow.Test.TestPerson},RedCow.ICloneProvider)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "producer">The producer function that returns an object of type T.</param>
            <param name = "cloneProvider">The clone provider to use.</param>
            <returns>A producer delegate.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Producer``1(System.Action{RedCow.Test.TestPerson,``0},RedCow.ICloneProvider)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "producer">The producer action that operates on an object of type T with a single argument.</param>
            <param name = "cloneProvider">The clone provider to use.</param>
            <typeparam name = "TArg">The type of the argument.</typeparam>
            <returns>A producer delegate.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Producer``1(System.Func{``0,RedCow.Test.TestPerson},RedCow.ICloneProvider)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "producer">The producer function that returns an object of type T with a single argument.</param>
            <param name = "cloneProvider">The clone provider to use.</param>
            <typeparam name = "TArg">The type of the argument.</typeparam>
            <returns>A producer delegate.</returns>
        </member>
        <member name="T:RedCow.Test.ReflectionCloneProviderTests">
            <summary>
            Unit tests for <see cref="T:RedCow.ReflectionCloneProvider"/>.
            </summary>
        </member>
        <member name="M:RedCow.Test.ReflectionCloneProviderTests.ClonesAllPublicProperties">
            <summary>
            Tests whether the Clone provider clones all properties.
            </summary>
        </member>
        <member name="M:RedCow.Test.ReflectionCloneProviderTests.DoesNotClonePrivatePropertiesAndFields">
            <summary>
            Tests that the clone provider does not clone fields, private and readonly properties.
            </summary>
        </member>
        <member name="T:RedCow.Test.TestPerson">
            <summary>
            The mutable type.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.FirstName">
            <summary>
            Gets or sets FirstName.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.LastName">
            <summary>
            Gets or sets LastName.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.IsAdult">
            <summary>
            Gets or sets a value indicating whether IsAdult is true.
            </summary>
        </member>
        <member name="T:RedCow.Test.ImmutableTestPerson">
             <summary>
            Immutable Implementation of <see cref="T:RedCow.Test.TestPerson"/>.
             </summary>
        </member>
        <member name="P:RedCow.Test.ImmutableTestPerson.FirstName">
            <summary>
            Gets or sets FirstName.
            </summary>
        </member>
        <member name="P:RedCow.Test.ImmutableTestPerson.LastName">
            <summary>
            Gets or sets LastName.
            </summary>
        </member>
        <member name="P:RedCow.Test.ImmutableTestPerson.IsAdult">
            <summary>
            Gets or sets a value indicating whether IsAdult is true.
            </summary>
        </member>
    </members>
</doc>
