<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedCow.Test</name>
    </assembly>
    <members>
        <member name="T:RedCow.Test.ImmutableProducerTests">
            <summary>
            Unit tests for Immutable Producers.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.InitialProduceTest">
            <summary>
            Tests the Initial Produce Method.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.StaticProduceActionTest">
            <summary>
            Tests the Produce Method.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.ProduceActionTest">
            <summary>
            Tests the Produce Method.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.StaticProduceFunctionTest">
            <summary>
            Tests the Produce Method.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.ProduceFunctionTest">
            <summary>
            Tests the Produce Method.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.ProducerActionTest">
            <summary>
            Tests the Producer Method.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.ProducerFunctionTest">
            <summary>
            Tests the Produce Method.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.ProducerActionWithArgumentTest">
            <summary>
            Tests the Producer Method with argument.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableProducerTests.LockedTest">
            <summary>
            Tests the that the produced immutable cannot be altered.
            </summary>
        </member>
        <member name="T:RedCow.Test.ITestPerson">
            <summary>
            Interface for an Immutable Test Person.
            </summary>
        </member>
        <member name="P:RedCow.Test.ITestPerson.FirstName">
            <summary>
            Gets the first name.
            </summary>
        </member>
        <member name="P:RedCow.Test.ITestPerson.LastName">
            <summary>
            Gets the last name.
            </summary>
        </member>
        <member name="P:RedCow.Test.ITestPerson.IsAdult">
            <summary>
            Gets a value indicating whether isAdult is true.
            </summary>
        </member>
        <member name="P:RedCow.Test.ITestPerson.FirstChild">
            <summary>
            Gets the First Child.
            </summary>
        </member>
        <member name="P:RedCow.Test.ITestPerson.SecondChild">
            <summary>
            Gets the Second Schild.
            </summary>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Produce(RedCow.Test.TestPerson,RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.ITestPerson"/> based on the
            intial state.
            </summary>
            <param name = "initialState">The initial State.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Produce(System.Action{RedCow.Test.TestPerson},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.ITestPerson"/> based on the
            specified recipe action.
            </summary>
            <param name = "recipe">The recipe action.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Produce(RedCow.Test.TestPerson,System.Action{RedCow.Test.TestPerson},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.ITestPerson"/> based on the
            specified recipe action.
            </summary>
            <param name = "initialState">The initial State.</param>
            <param name = "recipe">The recipe action.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Produce(System.Func{RedCow.Test.TestPerson},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.ITestPerson"/> based on the
            specified recipe function.
            </summary>
            <param name = "recipe">The recipe function.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Produce(RedCow.Test.TestPerson,System.Func{RedCow.Test.TestPerson},RedCow.IProducerOptions)">
            <summary>
            Produces the next <see cref = "T:RedCow.Test.ITestPerson"/> based on the
            specified recipe function.
            </summary>
            <param name = "initialState">The initial State.</param>
            <param name = "recipe">The recipe function.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Producer(System.Action{RedCow.Test.TestPerson},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe action that operates on an object of type T.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>A producer delegate.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Producer(System.Func{RedCow.Test.TestPerson},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe function that returns an object of type T.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>A recipe delegate.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Producer``1(System.Action{RedCow.Test.TestPerson,``0},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe action that operates on an object of type T with a single argument.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <typeparam name = "TArg">The type of the argument.</typeparam>
            <returns>A producer delegate.</returns>
        </member>
        <member name="M:RedCow.Test.ITestPerson.Producer``1(System.Func{``0,RedCow.Test.TestPerson},RedCow.IProducerOptions)">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name = "recipe">The recipe function that returns an object of type T with a single argument.</param>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <typeparam name = "TArg">The type of the argument.</typeparam>
            <returns>A producer delegate.</returns>
        </member>
        <member name="T:RedCow.Test.NestedTests">
            <summary>
            Unit tests for nested produce and immutability.
            </summary>
        </member>
        <member name="M:RedCow.Test.NestedTests.NestedProduceTest">
            <summary>
            Tests a nested produce.
            </summary>
        </member>
        <member name="M:RedCow.Test.NestedTests.NestedProduceChangedTest">
            <summary>
            Tests a nested produce.
            </summary>
        </member>
        <member name="M:RedCow.Test.NestedTests.CircularReferenceTest">
            <summary>
            Tests for circular references.
            </summary>
        </member>
        <member name="T:RedCow.Test.ReflectionCloneProviderTests">
            <summary>
            Unit tests for <see cref="T:RedCow.Immutable.ReflectionCloneProvider"/>.
            </summary>
        </member>
        <member name="M:RedCow.Test.ReflectionCloneProviderTests.ClonesAllPublicProperties">
            <summary>
            Tests whether the Clone provider clones all properties.
            </summary>
        </member>
        <member name="M:RedCow.Test.ReflectionCloneProviderTests.DoesNotClonePrivatePropertiesAndFields">
            <summary>
            Tests that the clone provider does not clone fields, private and readonly properties.
            </summary>
        </member>
        <member name="T:RedCow.Test.TestPerson">
            <summary>
            The mutable type.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.FirstName">
            <summary>
             Gets or sets FirstName.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.LastName">
            <summary>
             Gets or sets LastName.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.IsAdult">
            <summary>
             Gets or sets a value indicating whether IsAdult is true.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.FirstChild">
            <summary>
             Gets or sets FirstChild.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.RedCow#Test#ITestPerson#FirstChild">
            <summary>
             Gets or sets FirstChild.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.SecondChild">
            <summary>
             Gets or sets SecondChild.
            </summary>
        </member>
        <member name="P:RedCow.Test.TestPerson.RedCow#Test#ITestPerson#SecondChild">
            <summary>
             Gets or sets SecondChild.
            </summary>
        </member>
        <member name="T:RedCow.Test.ImmutableTestPerson">
            <summary>
            Immutable Implementation of <see cref = "T:RedCow.Test.TestPerson"/>.
            </summary>
        </member>
        <member name="P:RedCow.Test.ImmutableTestPerson.FirstName">
            <summary>
             Gets or sets FirstName.
            </summary>
        </member>
        <member name="P:RedCow.Test.ImmutableTestPerson.LastName">
            <summary>
             Gets or sets LastName.
            </summary>
        </member>
        <member name="P:RedCow.Test.ImmutableTestPerson.IsAdult">
            <summary>
             Gets or sets a value indicating whether IsAdult is true.
            </summary>
        </member>
        <member name="P:RedCow.Test.ImmutableTestPerson.FirstChild">
            <summary>
             Gets or sets FirstChild.
            </summary>
        </member>
        <member name="P:RedCow.Test.ImmutableTestPerson.SecondChild">
            <summary>
             Gets or sets SecondChild.
            </summary>
        </member>
        <member name="P:RedCow.Test.ImmutableTestPerson.Locked">
            <summary>
            Gets a value indicating whether the immutable is locked.
            </summary>
        </member>
        <member name="M:RedCow.Test.ImmutableTestPerson.Lock">
            <summary>
            Locks the immutable.
            </summary>
        </member>
        <member name="T:RedCow.Test.DraftTestPerson">
            <summary>
            Draft Implementation of <see cref = "T:RedCow.Test.TestPerson"/>.
            </summary>
        </member>
        <member name="P:RedCow.Test.DraftTestPerson.FirstName">
            <summary>
              Gets or sets FirstName.
            </summary>
        </member>
        <member name="P:RedCow.Test.DraftTestPerson.LastName">
            <summary>
              Gets or sets LastName.
            </summary>
        </member>
        <member name="P:RedCow.Test.DraftTestPerson.IsAdult">
            <summary>
              Gets or sets a value indicating whether IsAdult is true.
            </summary>
        </member>
        <member name="P:RedCow.Test.DraftTestPerson.FirstChild">
            <summary>
              Gets or sets FirstChild.
            </summary>
        </member>
        <member name="P:RedCow.Test.DraftTestPerson.SecondChild">
            <summary>
              Gets or sets SecondChild.
            </summary>
        </member>
        <member name="M:RedCow.Test.DraftTestPerson.#ctor(RedCow.Immutable.DraftState)">
            <summary>
            Initializes a new instance of the <see cref = "T:RedCow.Test.DraftTestPerson"/> class.
            </summary>
        </member>
        <member name="F:RedCow.Test.DraftTestPerson.draftState">
            <summary>
            the draftState field.
            </summary>
        </member>
        <member name="P:RedCow.Test.DraftTestPerson.RedCow#Immutable#IDraft#DraftState">
            <summary>
            Gets or sets the DraftState.
            </summary>
        </member>
        <member name="P:RedCow.Test.DraftTestPerson.Original">
            <summary>
            Gets the original.
            </summary>
        </member>
        <member name="P:RedCow.Test.DraftTestPerson.ImmutableOriginal">
            <summary>
            Gets the original as Immutable.
            </summary>
        </member>
    </members>
</doc>
