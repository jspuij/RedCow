<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedCow.Generators</name>
    </assembly>
    <members>
        <member name="T:RedCow.Generators.MutableClassGenerator">
            <summary>
            Generates a Mutable class.
            </summary>
        </member>
        <member name="F:RedCow.Generators.MutableClassGenerator.interfaceType">
            <summary>
            The type of the Immutable Interface.
            </summary>
        </member>
        <member name="M:RedCow.Generators.MutableClassGenerator.#ctor(Microsoft.CodeAnalysis.AttributeData)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Generators.MutableClassGenerator"/> class.
            </summary>
            <param name="attributeData">The attribute data to use.</param>
        </member>
        <member name="M:RedCow.Generators.MutableClassGenerator.GenerateAsync(CodeGeneration.Roslyn.TransformationContext,System.IProgress{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)">
            <summary>
            Generates the code.
            </summary>
            <param name="context">The transformation context.</param>
            <param name="progress">Progress information.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:RedCow.Generators.MutableClassGenerator.CreateProperty(Microsoft.CodeAnalysis.IPropertySymbol)">
            <summary>
            Creates a property with getter and setter based on the readonly interface property.
            </summary>
            <param name="p">The property to generate the Getter and Setter for.</param>
            <returns>An <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax"/>.</returns>
        </member>
        <member name="M:RedCow.Generators.MutableClassGenerator.CreateImmutableProperty(Microsoft.CodeAnalysis.IPropertySymbol)">
            <summary>
            Creates a property with getter and setter that throws an <see cref="T:System.InvalidOperationException"/>,
            based on the readonly interface property.
            </summary>
            <param name="p">The property to generate the Getter and Setter for.</param>
            <returns>An <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax"/>.</returns>
        </member>
        <member name="M:RedCow.Generators.MutableClassGenerator.GenerateXmlDoc(System.String)">
            <summary>
            Generate the XML Documentation for the Property.
            </summary>
            <param name="documentationText">The documentation text.</param>
            <returns>The XML Documentation as <see cref="T:Microsoft.CodeAnalysis.SyntaxTriviaList"/>.</returns>
        </member>
        <member name="M:RedCow.Generators.MutableClassGenerator.GeneratePartial(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Generates the partial part of the class.
            </summary>
            <param name="sourceClassDeclaration">The source class declaration.</param>
            <returns>A partial class declaration.</returns>
        </member>
        <member name="M:RedCow.Generators.MutableClassGenerator.GenerateImmutable(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Generates the abstract partial part of the class.
            </summary>
            <param name="sourceClassDeclaration">The source class declaration.</param>
            <returns>A partial class declaration.</returns>
        </member>
        <member name="T:RedCow.Generators.ProducerInterfaceGenerator">
            <summary>
            Generates producer methods on the Immutable interface.
            </summary>
        </member>
        <member name="F:RedCow.Generators.ProducerInterfaceGenerator.mutableType">
            <summary>
            The type of the Mutable.
            </summary>
        </member>
        <member name="M:RedCow.Generators.ProducerInterfaceGenerator.#ctor(Microsoft.CodeAnalysis.AttributeData)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Generators.ProducerInterfaceGenerator"/> class.
            </summary>
            <param name="attributeData">The attribute data to use.</param>
        </member>
        <member name="M:RedCow.Generators.ProducerInterfaceGenerator.GenerateAsync(CodeGeneration.Roslyn.TransformationContext,System.IProgress{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)">
            <summary>
            Generates the code.
            </summary>
            <param name="context">The transformation context.</param>
            <param name="progress">Progress information.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:RedCow.Generators.ProducerInterfaceGenerator.GeneratePartial(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)">
            <summary>
            Generates a partial for the interface.
            </summary>
            <param name="interfaceDeclaration">The interface to apply the partial to.</param>
            <returns>The interface declaration syntax.</returns>
        </member>
        <member name="M:RedCow.Generators.ProducerInterfaceGenerator.GenerateProduceFunction(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)">
            <summary>
            Generates the produce function that accepts a function.
            </summary>
            <param name="interfaceDeclaration">The interface declaration.</param>
            <returns>The method declaration.</returns>
        </member>
        <member name="M:RedCow.Generators.ProducerInterfaceGenerator.GenerateStaticProduceFunction(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)">
            <summary>
            Generates the static produce function that accepts a function.
            </summary>
            <param name="interfaceDeclaration">The interface declaration.</param>
            <returns>The method declaration.</returns>
        </member>
        <member name="M:RedCow.Generators.ProducerInterfaceGenerator.GenerateProduceDocumentation(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax,System.Boolean)">
            <summary>
            Generate the documentation for the produce method.
            </summary>
            <param name="interfaceDeclaration">The interface declaration.</param>
            <param name="isStatic">Whether this is the static produce method.</param>
            <returns>The documentation.</returns>
        </member>
        <member name="M:RedCow.Generators.ProducerInterfaceGenerator.GenerateProducerAction(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)">
            <summary>
            Generates the producer function that accepts a function.
            </summary>
            <param name="interfaceDeclaration">The interface declaration.</param>
            <returns>The method declaration.</returns>
        </member>
        <member name="M:RedCow.Generators.ProducerInterfaceGenerator.GenerateProducerFunction(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)">
            <summary>
            Generates the producer function that accepts an action.
            </summary>
            <param name="interfaceDeclaration">The interface declaration.</param>
            <returns>The method declaration.</returns>
        </member>
        <member name="M:RedCow.Generators.ProducerInterfaceGenerator.GenerateProducerActionWithArgument(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)">
            <summary>
            Generate the producer which accepts an action with a single Argument.
            </summary>
            <param name="interfaceDeclaration">The interface declaration.</param>
            <returns>The method declaration.</returns>
        </member>
        <member name="M:RedCow.Generators.ProducerInterfaceGenerator.GenerateProducerFunctionWithArgument(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)">
            <summary>
            Generate the producer which accepts a function with a single Argument.
            </summary>
            <param name="interfaceDeclaration">The interface declaration.</param>
            <returns>The method declaration.</returns>
        </member>
        <member name="M:RedCow.Generators.ProducerInterfaceGenerator.GenerateProducerDocumentation(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax,System.Boolean,System.Boolean)">
            <summary>
            Generates Method Documentation.
            </summary>
            <param name="interfaceDeclaration">The immutable interface declaration.</param>
            <param name="usesFunction">Whether the producer uses a function or an action.</param>
            <param name="hasArgument">Indicates whether the producer has an argument.</param>
            <returns>The documentation.</returns>
        </member>
    </members>
</doc>
