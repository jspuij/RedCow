<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedCow.X</name>
    </assembly>
    <members>
        <member name="T:RedCow.DelegateDisposable">
            <summary>
            Executes a delegate when disposed.
            </summary>
        </member>
        <member name="M:RedCow.DelegateDisposable.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.DelegateDisposable"/> class.
            </summary>
            <param name="disposeAction">The dispose action.</param>
        </member>
        <member name="M:RedCow.DelegateDisposable.Dispose">
            <summary>
            Executes the delegate.
            </summary>
        </member>
        <member name="T:RedCow.DispatchException">
            <summary>
            Exception that occurs when the state is dispatching.
            This exception is mainly thrown to make sure that reducers
            are pure and don't interact with the Store during dispatch.
            </summary>
        </member>
        <member name="M:RedCow.DispatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.DispatchException"/> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:RedCow.GenerateActionAttribute">
            <summary>
            Generates an action type for all methods decorated with this attribute.
            </summary>
        </member>
        <member name="T:RedCow.IDispatch">
            <summary>
            Interface that describes the Dispatch contract.
            </summary>
        </member>
        <member name="M:RedCow.IDispatch.Dispatch(System.Object)">
            <summary>
            Dispatches an action to modify the state.
            </summary>
            <param name="action">The action to dispatch.</param>
        </member>
        <member name="T:RedCow.IStore`1">
            <summary>
            Interface for a Store.
            </summary>
            <typeparam name="T">The type of the State.</typeparam>
        </member>
        <member name="P:RedCow.IStore`1.State">
            <summary>
            Gets the State.
            </summary>
        </member>
        <member name="M:RedCow.IStore`1.Dispatch(System.Object)">
            <summary>
            Dispatches an action.
            </summary>
            <param name="action">The action to dispatch.</param>
        </member>
        <member name="T:RedCow.Store`1">
            <summary>
            Implements a store.
            </summary>
            <typeparam name="T">The type of the State in the store.</typeparam>
        </member>
        <member name="F:RedCow.Store`1.Init">
            <summary>
            An action that is dispatched at the start to make sure that the
            store is initialized by calling all the reducers.
            </summary>
        </member>
        <member name="F:RedCow.Store`1.reducer">
            <summary>
            The reducer that is called on dispatch.
            </summary>
        </member>
        <member name="F:RedCow.Store`1.subscriptions">
            <summary>
            Subscriptions to this observable.
            </summary>
        </member>
        <member name="F:RedCow.Store`1.subscriptionsChanged">
            <summary>
            A boolean indicating that the subscriptions changed.
            </summary>
        </member>
        <member name="F:RedCow.Store`1.subscriptionsToNotify">
            <summary>
            A copy of the subscriptions that is used to iterate over.
            </summary>
        </member>
        <member name="F:RedCow.Store`1.dispatching">
            <summary>
            A boolean indicating that we are dispatching.
            </summary>
        </member>
        <member name="F:RedCow.Store`1.state">
            <summary>
            A reference to the store state.
            </summary>
        </member>
        <member name="M:RedCow.Store`1.#ctor(System.Func{`0,System.Object,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Store`1"/> class.
            </summary>
            <param name="reducer">The root reducer.</param>
        </member>
        <member name="M:RedCow.Store`1.#ctor(`0,System.Func{`0,System.Object,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Store`1"/> class.
            </summary>
            <param name="initialState">The initial state.</param>
            <param name="reducer">The root reducer.</param>
        </member>
        <member name="P:RedCow.Store`1.State">
            <summary>
            Gets the State.
            </summary>
        </member>
        <member name="M:RedCow.Store`1.Dispatch(System.Object)">
            <summary>
            Dispatches an action.
            </summary>
            <param name="action">The action to dispatch.</param>
        </member>
        <member name="M:RedCow.Store`1.Subscribe(System.IObserver{`0})">
            <summary>
            Notifies the store that an observer is ready to receive notifications.
            </summary>
            <param name="observer">The observer.</param>
            <returns>A disposable that can be used to cancel the subscription.</returns>
        </member>
    </members>
</doc>
