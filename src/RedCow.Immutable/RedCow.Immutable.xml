<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedCow.Immutable</name>
    </assembly>
    <members>
        <member name="T:RedCow.DraftTypeAttribute">
            <summary>
            Draft type attribute. Indicates which class is the draft type for this type.
            </summary>
        </member>
        <member name="M:RedCow.DraftTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.DraftTypeAttribute"/> class.
            </summary>
            <param name="draftType">
            The draft type.
            </param>
        </member>
        <member name="P:RedCow.DraftTypeAttribute.DraftType">
            <summary>
            Gets the draft type.
            </summary>
        </member>
        <member name="T:RedCow.GenerateMutableAttribute">
            <summary>
            Generate Mutable Attribute. Can be applied to a class to automatically generate properties that are mutable for
            the specified immutable interface.
            </summary>
        </member>
        <member name="M:RedCow.GenerateMutableAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.GenerateMutableAttribute"/> class.
            </summary>
            <param name="immutableInterfaceType">
            The type of the Immutable interface that needs to be implemented.
            </param>
        </member>
        <member name="P:RedCow.GenerateMutableAttribute.ImmutableInterfaceType">
            <summary>
            Gets the type of the Immutable Interface.
            </summary>
        </member>
        <member name="T:RedCow.GenerateProducersAttribute">
            <summary>
            Attribute to indicate that producer methods should be generated.
            </summary>
        </member>
        <member name="M:RedCow.GenerateProducersAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.GenerateProducersAttribute"/> class.
            </summary>
            <param name="mutableType">
            The type of the Immutable interface that needs to be implemented.
            </param>
        </member>
        <member name="P:RedCow.GenerateProducersAttribute.MutableType">
            <summary>
            Gets the type of the Immutable Interface.
            </summary>
        </member>
        <member name="T:RedCow.ICloneProvider">
            <summary>
            Interface for Clone Providers. Clone Providers can clone the public properties of an object
            to another object.
            </summary>
        </member>
        <member name="M:RedCow.ICloneProvider.Clone``2(``0,``1)">
            <summary>
            Clones the public properties of an object to another object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TDestination">The destination type.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="T:RedCow.Immutable.IDraftScope">
            <summary>
            The scope of the draft.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.IDraftScope.FinishDraft``1(``0)">
            <summary>
            Finishes a Draft.
            </summary>
            <typeparam name="T">The type of the state.</typeparam>
            <param name="draft">The draft.</param>
            <returns>An immutable of type T.</returns>
        </member>
        <member name="T:RedCow.IDraft`1">
            <summary>
            An interface of a Draft object of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The draft Type.</typeparam>
        </member>
        <member name="P:RedCow.IDraft`1.Original">
            <summary>
            Gets the original immutable object.
            </summary>
        </member>
        <member name="T:RedCow.ImmutableExtensions">
            <summary>
            Extension methods for <see cref="T:RedCow.Immutable`1"/>.
            </summary>
        </member>
        <member name="M:RedCow.ImmutableExtensions.CreateDraft``1(``0,RedCow.IDraft{``0}@,RedCow.ICloneProvider)">
            <summary>
            Creates a new Draft, based on the <see cref="T:RedCow.Immutable`1"/>.
            </summary>
            <typeparam name="T">The type of the state.</typeparam>
            <param name="state">The immutable.</param>
            <param name="draft">A new draft, based on the immutable.</param>
            <param name="cloneProvider">The clone provider.</param>
            <returns>A scope that is used to either reconcile or dispose of the draft.</returns>
        </member>
        <member name="T:RedCow.ImmutableTypeAttribute">
            <summary>
            Immutable type attribute. Indicates which class is the immutable type for this type.
            </summary>
        </member>
        <member name="M:RedCow.ImmutableTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.ImmutableTypeAttribute"/> class.
            </summary>
            <param name="immutableType">
            The immutable type.
            </param>
        </member>
        <member name="P:RedCow.ImmutableTypeAttribute.ImmutableType">
            <summary>
            Gets the immutable type.
            </summary>
        </member>
        <member name="T:RedCow.Immutable`1">
            <summary>
            Interface for Immutable instances of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The mutable type.</typeparam>
        </member>
        <member name="T:RedCow.ReflectionCloneProvider">
            <summary>
            Provides cloning using reflection.
            </summary>
        </member>
        <member name="M:RedCow.ReflectionCloneProvider.Clone``2(``0,``1)">
            <summary>
            Clones the public properties of an object to another object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TDestination">The destination type.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
    </members>
</doc>
