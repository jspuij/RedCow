<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedCow.Immutable</name>
    </assembly>
    <members>
        <member name="T:RedCow.GenerateMutable">
            <summary>
            Generate Mutable Attribute. Can be applied to a class to automatically generate properties that are mutable for
            the specified immutable interface.
            </summary>
        </member>
        <member name="M:RedCow.GenerateMutable.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.GenerateMutable"/> class.
            </summary>
            <param name="immutableInterfaceType">
            The type of the Immutable interface that needs to be implemented.
            </param>
        </member>
        <member name="P:RedCow.GenerateMutable.ImmutableInterfaceType">
            <summary>
            Gets the type of the Immutable Interface.
            </summary>
        </member>
        <member name="T:RedCow.ICloneProvider">
            <summary>
            Interface for Clone Providers. Clone Providers can clone the public properties of an object
            to another object.
            </summary>
        </member>
        <member name="M:RedCow.ICloneProvider.Clone``2(``0,``1)">
            <summary>
            Clones the public properties of an object to another object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TDestination">The destination type.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="T:RedCow.IDraft`1">
            <summary>
            An interface of a Draft object of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The draft Type.</typeparam>
        </member>
        <member name="P:RedCow.IDraft`1.Original">
            <summary>
            Gets the original immutable object.
            </summary>
        </member>
        <member name="T:RedCow.Immutable`1">
            <summary>
            Interface for Immutable instances of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The mutable type.</typeparam>
        </member>
        <member name="M:RedCow.Immutable`1.Produce(System.Func{`0,`0})">
            <summary>
            Produces the next <see cref="T:RedCow.Immutable`1"/> based on the
            specified producer function.
            </summary>
            <param name="producer">The producer function.</param>
            <returns>The next immutable state.</returns>
        </member>
        <member name="M:RedCow.Immutable`1.Producer(System.Func{`0,`0})">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name="producer">The producer function that operates on objects of type T.</param>
            <returns>A producer delegate.</returns>
        </member>
        <member name="M:RedCow.Immutable`1.Producer``1(System.Func{`0,``0,`0})">
            <summary>
            Creates a Producer delegate that can be used to curry on an Immutable State.
            </summary>
            <param name="producer">The producer function that operates on objects of type T with a single argument.</param>
            <typeparam name="TArg">The type of the argument.</typeparam>
            <returns>A producer delegate.</returns>
        </member>
        <member name="T:RedCow.ReflectionCloneProvider">
            <summary>
            Provides cloning using reflection.
            </summary>
        </member>
        <member name="M:RedCow.ReflectionCloneProvider.Clone``2(``0,``1)">
            <summary>
            Clones the public properties of an object to another object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TDestination">The destination type.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
    </members>
</doc>
