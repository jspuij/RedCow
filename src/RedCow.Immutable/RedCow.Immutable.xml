<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedCow.Immutable</name>
    </assembly>
    <members>
        <member name="T:RedCow.CircularReferenceException">
            <summary>
            An exception for circular references during reconciliation.
            </summary>
        </member>
        <member name="M:RedCow.CircularReferenceException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.CircularReferenceException"/> class.
            </summary>
            <param name="draft">The draft object that was involved in the exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:RedCow.Immutable.CollectionDraftState">
            <summary>
            A draft state for Collections.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.CollectionDraftState.#ctor(RedCow.Immutable.DraftScope,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Immutable.CollectionDraftState"/> class.
            </summary>
            <param name="scope">The scope this draft state belongs to.</param>
            <param name="original">The original.</param>
        </member>
        <member name="M:RedCow.Immutable.CollectionDraftState.Get``1(System.Func{``0},System.Action{``0},System.Action)">
            <summary>
            Gets a proxy based on the get and set functions provided.
            </summary>
            <typeparam name="T">The proxy type.</typeparam>
            <param name="getter">The getter.</param>
            <param name="setter">The setter.</param>
            <param name="copyOnWrite">The copy on write method.</param>
            <returns>The proxied value.</returns>
        </member>
        <member name="M:RedCow.Immutable.CollectionDraftState.Modify(System.Action,System.Action)">
            <summary>
            Modifies the attached collection using the specified modify action,
            optionally first executing the copy on write action.
            </summary>
            <param name="modify">The modification to the collection.</param>
            <param name="copyOnWrite">The copy on write action.</param>
        </member>
        <member name="T:RedCow.Immutable.Collections.ProxyCollectionBase`2">
            <summary>
            Base class for collection types.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <typeparam name="TValue">The inner value type.</typeparam>
        </member>
        <member name="F:RedCow.Immutable.Collections.ProxyCollectionBase`2.innerCollection">
            <summary>
            The inner collection.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyCollectionBase`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read only.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyCollectionBase`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyCollectionBase`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyCollectionBase`2.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyCollectionBase`2.Original">
            <summary>
            Gets the original collection if available.
            </summary>
            <remarks>May return null when this proxy is not in draft state.</remarks>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyCollectionBase`2.RedCow#Immutable#IDraft#DraftState">
            <summary>
            Gets or sets the <see cref="T:RedCow.Immutable.DraftState"/> for this draft.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyCollectionBase`2.RedCow#ILockable#Locked">
            <summary>
            Gets a value indicating whether the immutable is locked.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyCollectionBase`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyCollectionBase`2.CollectionDraftState">
            <summary>
            Gets or sets the draft state for this collection.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyCollectionBase`2.InnerCollection">
            <summary>
            Gets or sets the inner collection and creates one if it does not exist.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyCollectionBase`2.Locked">
            <summary>
            Gets a value indicating whether this collection is locked.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyCollectionBase`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyCollectionBase`2.RedCow#ILockable#Lock">
            <summary>
            Locks the Immutable.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyCollectionBase`2.RedCow#Immutable#IDraft#Clone">
            <summary>
            Clones the draft from the original.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyCollectionBase`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyCollectionBase`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an System.Array, starting at a particular System.Array index.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements copied
            from System.Collections.ICollection. The System.Array must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyCollectionBase`2.Add(`1)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The object to add to the collection.</param>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyCollectionBase`2.Clear">
            <summary>
             Removes all items from the collection.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyCollectionBase`2.Contains(`1)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>true if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyCollectionBase`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the elements of the collection. to an System.Array,
            starting at a particular System.Array index.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The array index.</param>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyCollectionBase`2.Remove(`1)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>
            true if item was successfully removed from the collection;
            otherwise, false. This method also returns false if item is not found in the
            original collection.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyCollectionBase`2.ThrowIfReadonly">
            <summary>
            Throws an exception that this collection is readonly.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyCollectionBase`2.ThrowIfRevoked">
            <summary>
            Throws an exception that this collection is revoked.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyCollectionBase`2.GetInnerValueEnumerator">
            <summary>
            Gets the value enumerator.
            </summary>
            <returns>An enumerator with values.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyCollectionBase`2.GetDraftEnumerator(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Gets an enumerator that creates drafts while enumerating.
            </summary>
            <param name="enumerator">The source enumerator.</param>
            <returns>An enumerator that creates drafts.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyCollectionBase`2.CopyOnWrite">
            <summary>
            Executes the Copy on write on the inner list.
            </summary>
        </member>
        <member name="T:RedCow.Immutable.Collections.ProxyDictionary`2">
            <summary>
            A dictionary that can act as a proxy around another dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys held in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values held in the dictionary.</typeparam>
        </member>
        <member name="F:RedCow.Immutable.Collections.ProxyDictionary`2.values">
            <summary>
            The values collection wrapper.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/>.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/>.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/>.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/>.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/>.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/>.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>
            The value associated with the specified key. If the specified key is not found,
            a get operation throws a System.Collections.Generic.KeyNotFoundException, and
            a set operation creates a new element with the specified key.
            </returns>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>
            The value associated with the specified key. If the specified key is not found,
            a get operation throws a System.Collections.Generic.KeyNotFoundException, and
            a set operation creates a new element with the specified key.
            </returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/>.</param>
            <returns>true if the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully found and removed; otherwise, false. This
            method returns false if key is not found in the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/>.
            </returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the
            key is found; otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.</param>
            <returns>true if the object that implements <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/> contains
            an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.System#Collections#IDictionary#Clear">
            <summary>
             Removes all elements from the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/>.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the System.Collections.Generic.Dictionary`2 contains the specified key.
            </summary>
            <param name="key">The key to locate in the System.Collections.Generic.Dictionary`2.</param>
            <returns>true if the System.Collections.Generic.Dictionary`2 contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/>.
            </summary>
            <returns>An enumerator that can be used to iterate through the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/>.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the value with the specified key from the System.Collections.Generic.Dictionary`2.
            </summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.GetDraftEnumerator(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Gets an enumerator that creates drafts while enumerating.
            </summary>
            <param name="enumerator">The source enumerator.</param>
            <returns>An enumerator that creates drafts.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.CopyOnWrite">
            <summary>
            Executes the Copy on write on the inner list.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.GetInnerValueEnumerator">
            <summary>
            Gets an enumerator of the inner values.
            </summary>
            <returns>An enumerator with inner values.</returns>
        </member>
        <member name="T:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyDictionaryEnumerator">
            <summary>
            Nongeneric enumerator wrapper for <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/>.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyDictionaryEnumerator.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyDictionaryEnumerator"/> class.
            </summary>
            <param name="enumerator">The enumerator to wrap.</param>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyDictionaryEnumerator.Entry">
            <summary>
            Gets the Dictionary Entry.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyDictionaryEnumerator.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyDictionaryEnumerator.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyDictionaryEnumerator.Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyDictionaryEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>True when the advancement succeeded, false otherwise.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyDictionaryEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element
            in the collection.
            </summary>
        </member>
        <member name="T:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection">
            <summary>
            Wraps the collection of values inside the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2"/>.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection.#ctor(RedCow.Immutable.Collections.ProxyDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read only.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>
            true if item was successfully removed from the collection;
            otherwise, false. This method also returns false if item is not found in the
            original collection.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
            <summary>
             Removes all items from the collection.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>true if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the elements of the collection. to an System.Array,
            starting at a particular System.Array index.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The array index.</param>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection. to an System.Array,
            starting at a particular System.Array index.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">The array index.</param>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyDictionary`2.ProxyValueCollection.GetDraftEnumerator(System.Collections.Generic.Dictionary{`0,`1}.Enumerator)">
            <summary>
            Gets an enumerator that creates drafts while enumerating.
            </summary>
            <param name="enumerator">The source enumerator.</param>
            <returns>An enumerator that creates drafts.</returns>
        </member>
        <member name="T:RedCow.Immutable.Collections.ProxyList`1">
            <summary>
            A list that can act as a proxy around another list.
            </summary>
            <typeparam name="T">The type that is held in the list.</typeparam>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:RedCow.Immutable.Collections.ProxyList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/>.</param>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyList`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/>.
            </summary>
            <param name="value">The object to add to the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/>.</param>
            <returns>The index of the item that was added.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyList`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/> contains a specific value.
            </summary>
            <param name="value">The object to locate in the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/>.</param>
            <returns>true if item is found in the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/>.
            </summary>
            <param name="value">The object to locate in the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="value">The object to insert into the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/>.</param>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyList`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:RedCow.Immutable.Collections.ProxyList`1"/>.</param>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyList`1.CopyOnWrite">
            <summary>
            Executes the Copy on write on the inner list.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyList`1.GetDraftEnumerator(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Gets an enumerator that creates drafts while enumerating.
            </summary>
            <param name="enumerator">The source enumerator.</param>
            <returns>An enumerator that creates drafts.</returns>
        </member>
        <member name="M:RedCow.Immutable.Collections.ProxyList`1.GetInnerValueEnumerator">
            <summary>
            Gets an enumerator of the inner values.
            </summary>
            <returns>An enumerator with inner values.</returns>
        </member>
        <member name="T:RedCow.Immutable.DraftExtensions">
            <summary>
            Extension methods for drafts.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.DraftExtensions.CreateDraft``1(``0,``0@,RedCow.IProducerOptions)">
            <summary>
            Creates a new Draft, based on the type of the state.
            </summary>
            <typeparam name="T">The type of the state.</typeparam>
            <param name="state">The immutable.</param>
            <param name="draft">A new draft, based on the immutable.</param>
            <param name="producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>A scope that is used to either reconcile or dispose of the draft.</returns>
        </member>
        <member name="M:RedCow.Immutable.DraftExtensions.IsDraft``1(``0)">
            <summary>
            Tests whether an object is a draft.
            </summary>
            <typeparam name="T">The type to test.</typeparam>
            <param name="state">The state to test.</param>
            <returns>A value indicating whether the object is a draft.</returns>
        </member>
        <member name="M:RedCow.Immutable.DraftExtensions.IsDraftable``1(``0)">
            <summary>
            Tests whether an object is a draftable.
            </summary>
            <typeparam name="T">The type to test.</typeparam>
            <param name="state">The state to test.</param>
            <returns>A value indicating whether the object is draftable.</returns>
        </member>
        <member name="M:RedCow.Immutable.DraftExtensions.InternalCreateDraft``1(System.Object,``0@,RedCow.IProducerOptions)">
            <summary>
            Creates a new Draft, based on the type of the state.
            </summary>
            <typeparam name="T">The type of the state.</typeparam>
            <param name="state">The immutable.</param>
            <param name="draft">A new draft, based on the immutable.</param>
            <param name="producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
            <returns>A scope that is used to either reconcile or dispose of the draft.</returns>
        </member>
        <member name="M:RedCow.Immutable.DraftExtensions.InternalIsDraft(System.Object)">
            <summary>
            Tests whether an object is a draft.
            </summary>
            <param name="state">The state to test.</param>
            <returns>A value indicating whether the object is a draft.</returns>
            <exception cref="T:System.ArgumentNullException">when the state is null.</exception>
        </member>
        <member name="M:RedCow.Immutable.DraftExtensions.InternalIsDraftable(System.Object)">
            <summary>
            Tests whether an object is a draftable.
            </summary>
            <param name="state">The state to test.</param>
            <returns>A value indicating whether the object is draftable.</returns>
            <exception cref="T:System.ArgumentNullException">when the state is null.</exception>
        </member>
        <member name="M:RedCow.Immutable.DraftExtensions.GetProxyType(System.Object)">
            <summary>
            Gets the proxy Type for this object.
            </summary>
            <param name="source">The source object.</param>
            <returns>The draft type if found, otherwise null.</returns>
        </member>
        <member name="T:RedCow.Immutable.DraftScope">
            <summary>
            Represents a draft scope (A scope in which drafts are created).
            </summary>
        </member>
        <member name="F:RedCow.Immutable.DraftScope.producerOptions">
            <summary>
            The producer options.
            </summary>
        </member>
        <member name="F:RedCow.Immutable.DraftScope.drafts">
            <summary>
            The list of drafts that this scope maintains.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.DraftScope.#ctor(RedCow.IProducerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Immutable.DraftScope"/> class.
            </summary>
            <param name = "producerOptions">The producer options to use. If you leave them null, the default options will be used.</param>
        </member>
        <member name="P:RedCow.Immutable.DraftScope.CloneProvider">
            <summary>
            Gets the Clone Provider for this scope.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.DraftScope.Parent">
            <summary>
            Gets or sets the parent <see cref="T:RedCow.Immutable.DraftScope"/>.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.DraftScope.AllowedImmutableReferenceTypes">
            <summary>
            Gets the allowed immutable reference types.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.DraftScope.IsFinishing">
            <summary>
            Gets a value indicating whether this scope is finishing.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.DraftScope.Dispose">
            <summary>
            Cleans up the scope.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.DraftScope.FinishDraft``2(``0)">
            <summary>
            Finishes a draft and returns the next state.
            </summary>
            <typeparam name="T">The type of the draft.</typeparam>
            <typeparam name="TInterface">The immutable type.</typeparam>
            <param name="draft">The draft.</param>
            <returns>The immutable.</returns>
        </member>
        <member name="M:RedCow.Immutable.DraftScope.CreateProxy(System.Object)">
            <summary>
            Creates a draft proxy using the current scope and clone provider.
            </summary>
            <param name="source">The source object to create the proxy for.</param>
            <exception cref="T:System.InvalidOperationException">When the source object is not draftable.</exception>
            <returns>An instance of type T.</returns>
        </member>
        <member name="M:RedCow.Immutable.DraftScope.FinishInstance(System.Object)">
            <summary>
            Finishes an instance.
            </summary>
            <param name="draft">The instance to finish.</param>
            <returns>The immutable variant of the instance.</returns>
        </member>
        <member name="T:RedCow.Immutable.DraftState">
            <summary>
            State for drafts.
            </summary>
        </member>
        <member name="F:RedCow.Immutable.DraftState.original">
            <summary>
            The original object.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.DraftState.#ctor(RedCow.Immutable.DraftScope,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Immutable.DraftState"/> class.
            </summary>
            <param name="scope">The scope this draft state belongs to.</param>
            <param name="original">The original.</param>
        </member>
        <member name="P:RedCow.Immutable.DraftState.Revoked">
            <summary>
            Gets or sets a value indicating whether or not this draft is revoked.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.DraftState.Changed">
            <summary>
            Gets a value indicating whether or not this draft is changed.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.DraftState.Scope">
            <summary>
            Gets the scope this draft belongs to.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.DraftState.GetOriginal``1">
            <summary>
            Gets the original.
            </summary>
            <typeparam name="T">The type to cast the original to.</typeparam>
            <returns>The original.</returns>
        </member>
        <member name="M:RedCow.Immutable.DraftState.Revoke">
            <summary>
            Revokes the draft.
            </summary>
        </member>
        <member name="T:RedCow.Immutable.ICloneProvider">
            <summary>
            Interface for Clone Providers. Clone Providers can clone the public properties of an object
            to another object.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.ICloneProvider.Clone(System.Object,System.Object,System.Func{System.Object,System.Object})">
            <summary>
            Clones the public properties of an object to another object.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination object.</param>
            <param name="assignmentFunction">The assignment function to use to assign the source value properties to the destination.</param>
        </member>
        <member name="T:RedCow.Immutable.IDraft">
            <summary>
            Non generic part of the Draft interface.
            </summary>
        </member>
        <member name="P:RedCow.Immutable.IDraft.DraftState">
            <summary>
            Gets or sets the <see cref="P:RedCow.Immutable.IDraft.DraftState"/> for this draft.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.IDraft.Clone">
            <summary>
            Clones the draft from the original.
            </summary>
        </member>
        <member name="T:RedCow.Immutable.IDraftScope">
            <summary>
            The scope of the draft.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.IDraftScope.FinishDraft``2(``0)">
            <summary>
            Finishes a Draft.
            </summary>
            <typeparam name="T">The type of the state.</typeparam>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="draft">The draft.</param>
            <returns>An immutable of type T.</returns>
        </member>
        <member name="T:RedCow.Immutable.IDraft`1">
            <summary>
            An interface of a Draft object of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The original type.</typeparam>
        </member>
        <member name="P:RedCow.Immutable.IDraft`1.Original">
            <summary>
            Gets the original immutable object.
            </summary>
        </member>
        <member name="T:RedCow.Immutable.ObjectDraftState">
            <summary>
            A draft state for objects.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.ObjectDraftState.#ctor(RedCow.Immutable.DraftScope,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Immutable.ObjectDraftState"/> class.
            </summary>
            <param name="scope">The scope this draft state belongs to.</param>
            <param name="original">The original.</param>
        </member>
        <member name="P:RedCow.Immutable.ObjectDraftState.ChildDrafts">
            <summary>
            Gets child draft proxies.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.ObjectDraftState.Get``1(System.String,System.Func{``0},System.Func{``0},System.Action{``0})">
            <summary>
            Gets a property value, possibly drafting it while getting it.
            </summary>
            <typeparam name="T">The type of the Property.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="getter">The getter.</param>
            <param name="originalGetter">The getter to get the original property.</param>
            <param name="setter">The setter.</param>
            <exception cref="T:System.InvalidOperationException">thrown when the draft is revoked.</exception>
            <returns>The property value.</returns>
        </member>
        <member name="M:RedCow.Immutable.ObjectDraftState.Set``1(System.String,System.Action,System.Action)">
            <summary>
            Sets a property value.
            </summary>
            <typeparam name="T">The type of the Property.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="setter">The setter.</param>
            <param name="copyOnWrite">The copy on write action.</param>
            <exception cref="T:System.InvalidOperationException">thrown when the draft is revoked.</exception>
        </member>
        <member name="T:RedCow.Immutable.ProxyTypeAttribute">
            <summary>
            Proxy type attribute. Indicates which class is the proxy type for this type.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.ProxyTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.Immutable.ProxyTypeAttribute"/> class.
            </summary>
            <param name="proxyType">
            The proxy type.
            </param>
        </member>
        <member name="P:RedCow.Immutable.ProxyTypeAttribute.ProxyType">
            <summary>
            Gets the proxy type.
            </summary>
        </member>
        <member name="T:RedCow.Immutable.ReflectionCloneProvider">
            <summary>
            Provides cloning using reflection.
            </summary>
        </member>
        <member name="M:RedCow.Immutable.ReflectionCloneProvider.Clone(System.Object,System.Object,System.Func{System.Object,System.Object})">
            <summary>
            Clones the public properties of an object to another object.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination object.</param>
            <param name="assignmentFunction">The assignment function to use to assign the source value properties to the destination.</param>
        </member>
        <member name="T:RedCow.DraftException">
            <summary>
            An exception for drafts.
            </summary>
        </member>
        <member name="M:RedCow.DraftException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.DraftException"/> class.
            </summary>
            <param name="draft">The draft object that was involved in the exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:RedCow.DraftException.Draft">
            <summary>
            Gets the draft object.
            </summary>
        </member>
        <member name="T:RedCow.DraftRevokedException">
            <summary>
            An exception that occurs when a property is changed or accessed on a draft that has been revoked.
            </summary>
        </member>
        <member name="M:RedCow.DraftRevokedException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.DraftRevokedException"/> class.
            </summary>
            <param name="draft">The draft object that was involved in the exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:RedCow.GenerateMutableAttribute">
            <summary>
            Generate Mutable Attribute. Can be applied to a class to automatically generate properties that are mutable for
            the specified immutable interface.
            </summary>
        </member>
        <member name="M:RedCow.GenerateMutableAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.GenerateMutableAttribute"/> class.
            </summary>
            <param name="immutableInterfaceType">
            The type of the Immutable interface that needs to be implemented.
            </param>
        </member>
        <member name="P:RedCow.GenerateMutableAttribute.ImmutableInterfaceType">
            <summary>
            Gets the type of the Immutable Interface.
            </summary>
        </member>
        <member name="T:RedCow.GenerateProducersAttribute">
            <summary>
            Attribute to indicate that producer methods should be generated.
            </summary>
        </member>
        <member name="M:RedCow.GenerateProducersAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.GenerateProducersAttribute"/> class.
            </summary>
            <param name="mutableType">
            The type of the Immutable interface that needs to be implemented.
            </param>
        </member>
        <member name="P:RedCow.GenerateProducersAttribute.MutableType">
            <summary>
            Gets the type of the Immutable Interface.
            </summary>
        </member>
        <member name="T:RedCow.ILockable">
            <summary>
            Interface for instances that can be locked.
            </summary>
        </member>
        <member name="P:RedCow.ILockable.Locked">
            <summary>
            Gets a value indicating whether the immutable is locked.
            </summary>
        </member>
        <member name="M:RedCow.ILockable.Lock">
            <summary>
            Locks the Immutable.
            </summary>
        </member>
        <member name="T:RedCow.ImmutableException">
            <summary>
            An exception for immutables.
            </summary>
        </member>
        <member name="M:RedCow.ImmutableException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedCow.ImmutableException"/> class.
            </summary>
            <param name="immutable">The draft object that was involved in the exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:RedCow.ImmutableException.Immutable">
            <summary>
            Gets the immutable object.
            </summary>
        </member>
        <member name="T:RedCow.IProducerOptions">
            <summary>
            The options used by the producer.
            </summary>
        </member>
        <member name="P:RedCow.IProducerOptions.CloneProvider">
            <summary>
            Gets the clone provider to use.
            </summary>
        </member>
        <member name="P:RedCow.IProducerOptions.AllowedImmutableReferenceTypes">
            <summary>
            Gets the immutable reference types that are allowed as Properties.
            </summary>
        </member>
        <member name="T:RedCow.ProducerOptions">
            <summary>
            The producer options to use.
            </summary>
        </member>
        <member name="P:RedCow.ProducerOptions.Default">
            <summary>
            Gets the default Producer options.
            </summary>
        </member>
        <member name="P:RedCow.ProducerOptions.CloneProvider">
            <summary>
            Gets or sets the Clone Provider.
            </summary>
        </member>
        <member name="P:RedCow.ProducerOptions.AllowedImmutableReferenceTypes">
            <summary>
            Gets the set of allowed immutable reference types.
            </summary>
        </member>
    </members>
</doc>
